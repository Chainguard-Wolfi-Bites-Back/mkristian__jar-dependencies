#-*- mode: ruby -*-

inherit 'jar-dependencies:gemspecs:0'

packaging 'pom'

# use the SNAPSHOT version in case we are not released
gem 'jar-dependencies', '${jar-dependencies.version}'

gem 'first_gem'
gem 'second_gem'
gem 'third_gem'
gem 'forth_gem'

properties( 'gem.home' => '${basedir}/../pkg',
            'gem.path' => '${gem.home}' )

jruby_plugin :gem, '${jruby.plugins.version}' do
  execute_goal :initialize
end

execute :use_the_gems, :phase => :package do |ctx|
  Gem.clear_paths
  path = File.join( ctx.project.parent.build.directory.to_pathname )
  p ENV['GEM_PATH'] = path
  require 'stringio'
  out = StringIO.new
  $stderr = out
  require 'first'
  require 'third'
  $stderr = STDERR

  [ 'bcpkix', 'bcprov' ].each do |name|
    s = "jar coordinate org.bouncycastle:#{name}-jdk15on already loaded with version 1.49"
    raise "mssing warning: #{s}" unless out.string.match( s ) 
  end

  # first has no vendored jars
  jars = Dir[ File.join( path, "gems/first-1/lib/org/bouncycastle/**/*" ) ]
  raise "unexpected found jars: #{jars.inspect}" unless jars.empty?

  # third has no vendored jars
  jars = Dir[ File.join( path, "gems/thrid-3/lib/org/bouncycastle/**/*" ) ]
  raise "unexpected found jars: #{jars.inspect}" unless jars.empty?

  # second has vendored jars
  ['bcprov-jdk15on/1.48/bcprov-jdk15on-1.48', 'bcpkix-jdk15on/1.48/bcpkix-jdk15on-1.48' ].each do |name|
    f = File.join( path, "gems/second-2/lib/org/bouncycastle/#{name}.jar" )
    raise "file '#{f}' does exist" if File.exists?( f )
  end

  ENV_JAVA['jars.lock'] = File.join( ctx.basedir.to_pathname, 'Jars.lock' ) 
  Jars.require_jars_lock!
  if $CLASSPATH.detect { |c| c =~ /jline/ } == nil
    raise 'no jline jar from Jars.lock loaded'
  end
end

# vim: syntax=Ruby
